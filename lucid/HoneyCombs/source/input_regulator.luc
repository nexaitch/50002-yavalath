module input_regulator #(

    // "Abstract" input regulator module used to provide somewhat regular inputs
    // Couple with a "mapper" module and extend to complete "concrete" module  
    // How this works is that regulator writes stable input to memory directly, and upon this input being cleared from memory,
    // counts down before rewriting/refreshing input in memory, unless input changes (in which case update is immediate)
    
    INPUT_WIDTH = 1 : INPUT_WIDTH > 0, // Raw input width
    DATA_WIDTH = 16 : DATA_WIDTH > 0, // Architecture word width
    PIPELINE_CYCLE_COUNT = 5 : PIPELINE_CYCLE_COUNT > 0, // Number of cycles to delay input signal for non-metastability, default amounting to 50ns
    CONDITIONING_CYCLE_COUNT = 10000000 : CONDITIONING_CYCLE_COUNT > PIPELINE_CYCLE_COUNT, // Number of cycles for overall conditioning, default amounting to 0.1s
    INPUT_REFRESH_CYCLE_COUNT = 50000000 : INPUT_REFRESH_CYCLE_COUNT > 0, // Number of cycles for refresh, default amounting to 0.5s
    INPUT_REFRESH_CYCLE_COUNT_OFFSET = INPUT_REFRESH_CYCLE_COUNT-1
    
  ) (
  
    input clk,
    input inp[INPUT_WIDTH], // Signal input
    output map_inp[INPUT_WIDTH], // Mapper input, to map conditioned signal input to some output
    input map_out[DATA_WIDTH], // Mapper output
    input input_read[DATA_WIDTH], // Current input data in data memory
    output input_write_enable, // Write enable bit for writing input to data memory
    output input_write_data[DATA_WIDTH] // Input data to write to data memory
    
  ) {
  
  input_conditioner conditioner(#PIPELINE_CYCLE_COUNT(PIPELINE_CYCLE_COUNT), #CONDITIONING_CYCLE_COUNT(CONDITIONING_CYCLE_COUNT),
  #WIDTH(INPUT_WIDTH), .clk(clk), .in(inp)); // Conditioner to condition signal input
  
  dff counter[$clog2(INPUT_REFRESH_CYCLE_COUNT_OFFSET+1)](.clk(clk)); // Counter to count for input refresh
  dff input_tracker[DATA_WIDTH](.clk(clk)); // Track input
  
  half_adder counter_incrementer[$clog2(INPUT_REFRESH_CYCLE_COUNT_OFFSET+1)]; // Half adder 1-bit incrementer for counter
  mux2 counter_select[$clog2(INPUT_REFRESH_CYCLE_COUNT_OFFSET+1)]; // Mux to select next value of counter
  mux2 input_write_data_select[DATA_WIDTH]; // Mux to select value of input_write_data
  var i;

  always {
  
    // Pass conditioned output to mapper
    map_inp = conditioner.out;
    
    // Increment counter
    counter_incrementer.a = counter.q;
    counter_incrementer.b[0] = 1b1;
    for (i=1;i<$clog2(INPUT_REFRESH_CYCLE_COUNT);i++){
      counter_incrementer.b[i] = counter_incrementer.cout[i-1];
    }
    
    input_tracker.d = map_out;
    
    // We have 3 things to assign: counter.d, input_write_enable, and input_data
    
    // counter.d is:
    // 0 if mapper output is 0 or mapper output changes or input is ready (mapper output is non-0 and counter is 0 and input read is non-zero) or input is almost ready (mapper output is non-0 and counter is max)
    // counter.d+1 if mapper output is constant, and if input has been read (mapper output non-0 and counter is 0 and input read is 0) or counter is counting (mapper output non-0 but counter not 0 or max)
    // Implementing using latter logic
    
    // To increment counter (s0==1), as seen below in same order, map_out must be non-zero,
    // map_out is invariant and at least one of the following be satisfied:
    // Counter is 0 and input read is 0, or
    // Counter is non-0 and counter is non-max
    counter_select.s0 = $clog2(INPUT_REFRESH_CYCLE_COUNT_OFFSET+1)x{(|map_out)
    & (~|(map_out^input_tracker.q))
    & (((~|counter.q)&(~|input_read))
    | ((|counter.q)&(|(counter.q^INPUT_REFRESH_CYCLE_COUNT_OFFSET))))};
        
    counter_select.inp0 = $clog2(INPUT_REFRESH_CYCLE_COUNT_OFFSET+1)x{1b0};
    counter_select.inp1 = counter_incrementer.s;
    
    counter.d = counter_select.out;
        
    // input_write_enable is:
    // 1 is mapper output is 0 or changes, or input is almost ready (counter is max and mapper output is non-0)
    // 0 otherwise (finally a very clean code)
    // Implementing using former logic
    
    // To set input_write_enable, as seen below in same order, map_out==0
    // or map_out is non-constant
    // or counter is maxed
    input_write_enable = (~|(map_out))
    | (|(map_out^input_tracker.q))
    | (~|(counter.q^INPUT_REFRESH_CYCLE_COUNT_OFFSET));
    
    // input_write_data is:
    // map_out if counter is maxed and not (map_out is non-constant), or map_out is non-constant
    // 0 if map_out is 0
    input_write_data_select.s0 = DATA_WIDTHx{(~|(counter.q^INPUT_REFRESH_CYCLE_COUNT_OFFSET)) | (|(map_out^input_tracker.q))};
    input_write_data_select.inp0 = DATA_WIDTHx{0};
    input_write_data_select.inp1 = map_out;
    input_write_data = input_write_data_select.out;
    
  }
}
