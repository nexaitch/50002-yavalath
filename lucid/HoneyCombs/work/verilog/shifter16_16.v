/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifter16_16 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] shift
  );
  
  
  
  wire [(5'h10+0)-1:0] M_reverse_a_first_out;
  reg [(5'h10+0)-1:0] M_reverse_a_first_inp0;
  reg [(5'h10+0)-1:0] M_reverse_a_first_inp1;
  
  genvar GEN_reverse_a_first0;
  generate
  for (GEN_reverse_a_first0=0;GEN_reverse_a_first0<5'h10;GEN_reverse_a_first0=GEN_reverse_a_first0+1) begin: reverse_a_first_gen_0
    mux2_12 reverse_a_first (
      .s0(alufn[5+0-:1]),
      .inp0(M_reverse_a_first_inp0[GEN_reverse_a_first0*(1)+(1)-1-:(1)]),
      .inp1(M_reverse_a_first_inp1[GEN_reverse_a_first0*(1)+(1)-1-:(1)]),
      .out(M_reverse_a_first_out[GEN_reverse_a_first0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h4+0)*(5'h10+0)-1:0] M_cascade_shifter_out;
  reg [(3'h4+0)*(5'h10+0)-1:0] M_cascade_shifter_inp0;
  reg [(3'h4+0)*(5'h10+0)-1:0] M_cascade_shifter_inp1;
  reg [(3'h4+0)*(5'h10+0)-1:0] M_cascade_shifter_s0;
  
  genvar GEN_cascade_shifter0, GEN_cascade_shifter1;
  generate
  for (GEN_cascade_shifter0=0;GEN_cascade_shifter0<3'h4;GEN_cascade_shifter0=GEN_cascade_shifter0+1) begin: cascade_shifter_gen_0
    for (GEN_cascade_shifter1=0;GEN_cascade_shifter1<5'h10;GEN_cascade_shifter1=GEN_cascade_shifter1+1) begin: cascade_shifter_gen_1
      mux2_12 cascade_shifter (
        .inp0(M_cascade_shifter_inp0[GEN_cascade_shifter0*(5'h10)*(1)+GEN_cascade_shifter1*(1)+(1)-1-:(1)]),
        .inp1(M_cascade_shifter_inp1[GEN_cascade_shifter0*(5'h10)*(1)+GEN_cascade_shifter1*(1)+(1)-1-:(1)]),
        .s0(M_cascade_shifter_s0[GEN_cascade_shifter0*(5'h10)*(1)+GEN_cascade_shifter1*(1)+(1)-1-:(1)]),
        .out(M_cascade_shifter_out[GEN_cascade_shifter0*(5'h10)*(1)+GEN_cascade_shifter1*(1)+(1)-1-:(1)])
      );
    end
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_reverse_a_last_out;
  reg [(5'h10+0)-1:0] M_reverse_a_last_inp0;
  reg [(5'h10+0)-1:0] M_reverse_a_last_inp1;
  
  genvar GEN_reverse_a_last0;
  generate
  for (GEN_reverse_a_last0=0;GEN_reverse_a_last0<5'h10;GEN_reverse_a_last0=GEN_reverse_a_last0+1) begin: reverse_a_last_gen_0
    mux2_12 reverse_a_last (
      .s0(alufn[5+0-:1]),
      .inp0(M_reverse_a_last_inp0[GEN_reverse_a_last0*(1)+(1)-1-:(1)]),
      .inp1(M_reverse_a_last_inp1[GEN_reverse_a_last0*(1)+(1)-1-:(1)]),
      .out(M_reverse_a_last_out[GEN_reverse_a_last0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  reg shift_fill;
  
  always @* begin
    shift_fill = 1'h0;
    M_reverse_a_first_inp0[0+0-:1] = a[15+0-:1];
    M_reverse_a_first_inp0[1+0-:1] = a[14+0-:1];
    M_reverse_a_first_inp0[2+0-:1] = a[13+0-:1];
    M_reverse_a_first_inp0[3+0-:1] = a[12+0-:1];
    M_reverse_a_first_inp0[4+0-:1] = a[11+0-:1];
    M_reverse_a_first_inp0[5+0-:1] = a[10+0-:1];
    M_reverse_a_first_inp0[6+0-:1] = a[9+0-:1];
    M_reverse_a_first_inp0[7+0-:1] = a[8+0-:1];
    M_reverse_a_first_inp0[8+0-:1] = a[7+0-:1];
    M_reverse_a_first_inp0[9+0-:1] = a[6+0-:1];
    M_reverse_a_first_inp0[10+0-:1] = a[5+0-:1];
    M_reverse_a_first_inp0[11+0-:1] = a[4+0-:1];
    M_reverse_a_first_inp0[12+0-:1] = a[3+0-:1];
    M_reverse_a_first_inp0[13+0-:1] = a[2+0-:1];
    M_reverse_a_first_inp0[14+0-:1] = a[1+0-:1];
    M_reverse_a_first_inp0[15+0-:1] = a[0+0-:1];
    M_reverse_a_first_inp1 = a;
    M_cascade_shifter_s0[0+15-:16] = {5'h10{b[0+0-:1]}};
    M_cascade_shifter_inp0[0+15-:16] = M_reverse_a_first_out;
    M_cascade_shifter_inp1[0+15+0-:1] = shift_fill;
    M_cascade_shifter_inp1[0+0+14-:15] = M_reverse_a_first_out[1+14-:15];
    M_cascade_shifter_s0[16+15-:16] = {5'h10{b[1+0-:1]}};
    M_cascade_shifter_inp0[16+15-:16] = M_cascade_shifter_out[0+15-:16];
    M_cascade_shifter_inp1[16+14+1-:2] = {2'h2{shift_fill}};
    M_cascade_shifter_inp1[16+0+13-:14] = M_cascade_shifter_out[0+2+13-:14];
    M_cascade_shifter_s0[32+15-:16] = {5'h10{b[2+0-:1]}};
    M_cascade_shifter_inp0[32+15-:16] = M_cascade_shifter_out[16+15-:16];
    M_cascade_shifter_inp1[32+12+3-:4] = {3'h4{shift_fill}};
    M_cascade_shifter_inp1[32+0+11-:12] = M_cascade_shifter_out[16+4+11-:12];
    M_cascade_shifter_s0[48+15-:16] = {5'h10{b[3+0-:1]}};
    M_cascade_shifter_inp0[48+15-:16] = M_cascade_shifter_out[32+15-:16];
    M_cascade_shifter_inp1[48+8+7-:8] = {4'h8{shift_fill}};
    M_cascade_shifter_inp1[48+0+7-:8] = M_cascade_shifter_out[32+8+7-:8];
    M_reverse_a_last_inp0[0+0-:1] = M_cascade_shifter_out[48+15+0-:1];
    M_reverse_a_last_inp0[1+0-:1] = M_cascade_shifter_out[48+14+0-:1];
    M_reverse_a_last_inp0[2+0-:1] = M_cascade_shifter_out[48+13+0-:1];
    M_reverse_a_last_inp0[3+0-:1] = M_cascade_shifter_out[48+12+0-:1];
    M_reverse_a_last_inp0[4+0-:1] = M_cascade_shifter_out[48+11+0-:1];
    M_reverse_a_last_inp0[5+0-:1] = M_cascade_shifter_out[48+10+0-:1];
    M_reverse_a_last_inp0[6+0-:1] = M_cascade_shifter_out[48+9+0-:1];
    M_reverse_a_last_inp0[7+0-:1] = M_cascade_shifter_out[48+8+0-:1];
    M_reverse_a_last_inp0[8+0-:1] = M_cascade_shifter_out[48+7+0-:1];
    M_reverse_a_last_inp0[9+0-:1] = M_cascade_shifter_out[48+6+0-:1];
    M_reverse_a_last_inp0[10+0-:1] = M_cascade_shifter_out[48+5+0-:1];
    M_reverse_a_last_inp0[11+0-:1] = M_cascade_shifter_out[48+4+0-:1];
    M_reverse_a_last_inp0[12+0-:1] = M_cascade_shifter_out[48+3+0-:1];
    M_reverse_a_last_inp0[13+0-:1] = M_cascade_shifter_out[48+2+0-:1];
    M_reverse_a_last_inp0[14+0-:1] = M_cascade_shifter_out[48+1+0-:1];
    M_reverse_a_last_inp0[15+0-:1] = M_cascade_shifter_out[48+0+0-:1];
    M_reverse_a_last_inp1 = M_cascade_shifter_out[48+15-:16];
    shift = M_reverse_a_last_out;
  end
endmodule
