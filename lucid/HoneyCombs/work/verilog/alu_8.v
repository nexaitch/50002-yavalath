/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_8 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adder16_mod_s;
  wire [1-1:0] M_adder16_mod_z;
  wire [1-1:0] M_adder16_mod_v;
  wire [1-1:0] M_adder16_mod_n;
  reg [16-1:0] M_adder16_mod_a;
  reg [16-1:0] M_adder16_mod_b;
  adder16_14 adder16_mod (
    .a(M_adder16_mod_a),
    .b(M_adder16_mod_b),
    .s(M_adder16_mod_s),
    .z(M_adder16_mod_z),
    .v(M_adder16_mod_v),
    .n(M_adder16_mod_n)
  );
  
  wire [16-1:0] M_shifter16_mod_shift;
  reg [6-1:0] M_shifter16_mod_alufn;
  reg [16-1:0] M_shifter16_mod_a;
  reg [16-1:0] M_shifter16_mod_b;
  shifter16_16 shifter16_mod (
    .alufn(M_shifter16_mod_alufn),
    .a(M_shifter16_mod_a),
    .b(M_shifter16_mod_b),
    .shift(M_shifter16_mod_shift)
  );
  
  wire [16-1:0] M_and16_mod_bool;
  reg [16-1:0] M_and16_mod_a;
  reg [16-1:0] M_and16_mod_b;
  and16_17 and16_mod (
    .a(M_and16_mod_a),
    .b(M_and16_mod_b),
    .bool(M_and16_mod_bool)
  );
  
  wire [(5'h10+0)-1:0] M_output_mux_out;
  reg [(5'h10+0)-1:0] M_output_mux_inp0;
  reg [(5'h10+0)-1:0] M_output_mux_inp1;
  reg [(5'h10+0)-1:0] M_output_mux_inp2;
  reg [(5'h10+0)-1:0] M_output_mux_inp3;
  
  genvar GEN_output_mux0;
  generate
  for (GEN_output_mux0=0;GEN_output_mux0<5'h10;GEN_output_mux0=GEN_output_mux0+1) begin: output_mux_gen_0
    mux4_18 output_mux (
      .s0(alufn[0+0-:1]),
      .s1(alufn[1+0-:1]),
      .inp0(M_output_mux_inp0[GEN_output_mux0*(1)+(1)-1-:(1)]),
      .inp1(M_output_mux_inp1[GEN_output_mux0*(1)+(1)-1-:(1)]),
      .inp2(M_output_mux_inp2[GEN_output_mux0*(1)+(1)-1-:(1)]),
      .inp3(M_output_mux_inp3[GEN_output_mux0*(1)+(1)-1-:(1)]),
      .out(M_output_mux_out[GEN_output_mux0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_adder16_mod_a = a;
    M_adder16_mod_b = b;
    M_output_mux_inp0 = M_adder16_mod_s;
    z = M_adder16_mod_z;
    v = M_adder16_mod_v;
    n = M_adder16_mod_n;
    M_shifter16_mod_alufn = alufn;
    M_shifter16_mod_a = a;
    M_shifter16_mod_b = b;
    M_output_mux_inp1 = M_shifter16_mod_shift;
    M_and16_mod_a = a;
    M_and16_mod_b = b;
    M_output_mux_inp2 = M_and16_mod_bool;
    M_output_mux_inp3 = 16'h0000;
    out = M_output_mux_out;
  end
endmodule
