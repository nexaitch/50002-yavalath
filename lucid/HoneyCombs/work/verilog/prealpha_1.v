/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module prealpha_1 (
    input clk,
    input rst,
    input [3:0] joystick,
    input button,
    output reg [8:0] rows,
    output reg [8:0] player0,
    output reg [8:0] player1,
    output reg [1:0] turn,
    output reg [7:0] debug_read
  );
  
  
  
  wire [16-1:0] M_pc_ia;
  reg [1-1:0] M_pc_pcsel;
  reg [9-1:0] M_pc_c;
  pc_3 pc (
    .clk(clk),
    .rst(rst),
    .pcsel(M_pc_pcsel),
    .c(M_pc_c),
    .ia(M_pc_ia)
  );
  
  wire [1-1:0] M_ctl_pcsel;
  wire [1-1:0] M_ctl_ra2sel;
  wire [1-1:0] M_ctl_bsel;
  wire [1-1:0] M_ctl_wdsel;
  wire [6-1:0] M_ctl_alufn;
  wire [1-1:0] M_ctl_wr;
  wire [1-1:0] M_ctl_werf;
  reg [1-1:0] M_ctl_z;
  reg [4-1:0] M_ctl_opcode;
  control_unit_4 ctl (
    .rst(rst),
    .z(M_ctl_z),
    .opcode(M_ctl_opcode),
    .pcsel(M_ctl_pcsel),
    .ra2sel(M_ctl_ra2sel),
    .bsel(M_ctl_bsel),
    .wdsel(M_ctl_wdsel),
    .alufn(M_ctl_alufn),
    .wr(M_ctl_wr),
    .werf(M_ctl_werf)
  );
  
  wire [16-1:0] M_instr_mem_unit_id;
  reg [9-1:0] M_instr_mem_unit_ia;
  instruction_memory_unit_5 instr_mem_unit (
    .ia(M_instr_mem_unit_ia),
    .id(M_instr_mem_unit_id)
  );
  
  wire [16-1:0] M_regfile_rd1;
  wire [16-1:0] M_regfile_rd2;
  wire [1-1:0] M_regfile_z;
  wire [4-1:0] M_regfile_debug_r0;
  wire [4-1:0] M_regfile_debug_r1;
  reg [1-1:0] M_regfile_werf;
  reg [1-1:0] M_regfile_ra2sel;
  reg [16-1:0] M_regfile_write_data;
  reg [3-1:0] M_regfile_ra;
  reg [3-1:0] M_regfile_rb;
  reg [3-1:0] M_regfile_rc;
  regfile_6 regfile (
    .clk(clk),
    .werf(M_regfile_werf),
    .ra2sel(M_regfile_ra2sel),
    .write_data(M_regfile_write_data),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .rd1(M_regfile_rd1),
    .rd2(M_regfile_rd2),
    .z(M_regfile_z),
    .debug_r0(M_regfile_debug_r0),
    .debug_r1(M_regfile_debug_r1)
  );
  
  wire [16-1:0] M_data_memory_read_data;
  wire [16-1:0] M_data_memory_input0_read_data;
  wire [16-1:0] M_data_memory_input1_read_data;
  wire [144-1:0] M_data_memory_player0_read;
  wire [144-1:0] M_data_memory_player1_read;
  wire [144-1:0] M_data_memory_selection_read;
  wire [1-1:0] M_data_memory_turn_read;
  reg [6-1:0] M_data_memory_waddr;
  reg [16-1:0] M_data_memory_write_data;
  reg [1-1:0] M_data_memory_write_en;
  reg [6-1:0] M_data_memory_raddr;
  reg [16-1:0] M_data_memory_input0_write_data;
  reg [1-1:0] M_data_memory_input0_write_en;
  reg [16-1:0] M_data_memory_input1_write_data;
  reg [1-1:0] M_data_memory_input1_write_en;
  data_memory_7 data_memory (
    .clk(clk),
    .waddr(M_data_memory_waddr),
    .write_data(M_data_memory_write_data),
    .write_en(M_data_memory_write_en),
    .raddr(M_data_memory_raddr),
    .input0_write_data(M_data_memory_input0_write_data),
    .input0_write_en(M_data_memory_input0_write_en),
    .input1_write_data(M_data_memory_input1_write_data),
    .input1_write_en(M_data_memory_input1_write_en),
    .read_data(M_data_memory_read_data),
    .input0_read_data(M_data_memory_input0_read_data),
    .input1_read_data(M_data_memory_input1_read_data),
    .player0_read(M_data_memory_player0_read),
    .player1_read(M_data_memory_player1_read),
    .selection_read(M_data_memory_selection_read),
    .turn_read(M_data_memory_turn_read)
  );
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_8 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_joystick_regulator_write_en;
  wire [16-1:0] M_joystick_regulator_out;
  reg [4-1:0] M_joystick_regulator_in;
  reg [16-1:0] M_joystick_regulator_input_read;
  joystick_regulator_9 joystick_regulator (
    .clk(clk),
    .in(M_joystick_regulator_in),
    .input_read(M_joystick_regulator_input_read),
    .write_en(M_joystick_regulator_write_en),
    .out(M_joystick_regulator_out)
  );
  
  wire [1-1:0] M_button_regulator_write_en;
  wire [16-1:0] M_button_regulator_out;
  reg [1-1:0] M_button_regulator_in;
  reg [16-1:0] M_button_regulator_input_read;
  button_regulator_10 button_regulator (
    .clk(clk),
    .in(M_button_regulator_in),
    .input_read(M_button_regulator_input_read),
    .write_en(M_button_regulator_write_en),
    .out(M_button_regulator_out)
  );
  
  wire [9-1:0] M_input_printer_row;
  wire [9-1:0] M_input_printer_column0;
  wire [9-1:0] M_input_printer_column1;
  reg [144-1:0] M_input_printer_player0_occupancy;
  reg [144-1:0] M_input_printer_player1_occupancy;
  reg [144-1:0] M_input_printer_selection_occupancy;
  input_printer_11 input_printer (
    .clk(clk),
    .player0_occupancy(M_input_printer_player0_occupancy),
    .player1_occupancy(M_input_printer_player1_occupancy),
    .selection_occupancy(M_input_printer_selection_occupancy),
    .row(M_input_printer_row),
    .column0(M_input_printer_column0),
    .column1(M_input_printer_column1)
  );
  
  wire [(5'h10+0)-1:0] M_bsel_mux_out;
  reg [(5'h10+0)-1:0] M_bsel_mux_inp0;
  reg [(5'h10+0)-1:0] M_bsel_mux_inp1;
  reg [(5'h10+0)-1:0] M_bsel_mux_s0;
  
  genvar GEN_bsel_mux0;
  generate
  for (GEN_bsel_mux0=0;GEN_bsel_mux0<5'h10;GEN_bsel_mux0=GEN_bsel_mux0+1) begin: bsel_mux_gen_0
    mux2_12 bsel_mux (
      .inp0(M_bsel_mux_inp0[GEN_bsel_mux0*(1)+(1)-1-:(1)]),
      .inp1(M_bsel_mux_inp1[GEN_bsel_mux0*(1)+(1)-1-:(1)]),
      .s0(M_bsel_mux_s0[GEN_bsel_mux0*(1)+(1)-1-:(1)]),
      .out(M_bsel_mux_out[GEN_bsel_mux0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_wdsel_mux_out;
  reg [(5'h10+0)-1:0] M_wdsel_mux_inp0;
  reg [(5'h10+0)-1:0] M_wdsel_mux_inp1;
  reg [(5'h10+0)-1:0] M_wdsel_mux_s0;
  
  genvar GEN_wdsel_mux0;
  generate
  for (GEN_wdsel_mux0=0;GEN_wdsel_mux0<5'h10;GEN_wdsel_mux0=GEN_wdsel_mux0+1) begin: wdsel_mux_gen_0
    mux2_12 wdsel_mux (
      .inp0(M_wdsel_mux_inp0[GEN_wdsel_mux0*(1)+(1)-1-:(1)]),
      .inp1(M_wdsel_mux_inp1[GEN_wdsel_mux0*(1)+(1)-1-:(1)]),
      .s0(M_wdsel_mux_s0[GEN_wdsel_mux0*(1)+(1)-1-:(1)]),
      .out(M_wdsel_mux_out[GEN_wdsel_mux0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_pc_pcsel = M_ctl_pcsel;
    M_pc_c = M_instr_mem_unit_id[0+8-:9];
    M_ctl_opcode = M_instr_mem_unit_id[12+3-:4];
    M_ctl_z = M_regfile_z;
    M_instr_mem_unit_ia = M_pc_ia[0+8-:9];
    M_regfile_werf = M_ctl_werf;
    M_regfile_ra2sel = M_ctl_ra2sel;
    M_regfile_ra = M_instr_mem_unit_id[6+2-:3];
    M_regfile_rb = M_instr_mem_unit_id[3+2-:3];
    M_regfile_rc = M_instr_mem_unit_id[9+2-:3];
    M_regfile_write_data = M_wdsel_mux_out;
    M_data_memory_write_en = M_ctl_wr;
    M_data_memory_waddr = M_alu_out[0+5-:6];
    M_data_memory_write_data = M_regfile_rd2;
    M_data_memory_raddr = M_alu_out[0+5-:6];
    M_data_memory_input0_write_en = M_joystick_regulator_write_en;
    M_data_memory_input0_write_data = M_joystick_regulator_out;
    M_data_memory_input1_write_en = M_button_regulator_write_en;
    M_data_memory_input1_write_data = M_button_regulator_out;
    M_alu_a = M_regfile_rd1;
    M_alu_b = M_bsel_mux_out;
    M_alu_alufn = M_ctl_alufn;
    M_bsel_mux_s0 = {5'h10{M_ctl_bsel}};
    M_bsel_mux_inp0 = M_regfile_rd2;
    M_bsel_mux_inp1[6+9-:10] = {4'ha{M_instr_mem_unit_id[5+0-:1]}};
    M_bsel_mux_inp1[0+5-:6] = M_instr_mem_unit_id[0+5-:6];
    M_wdsel_mux_s0 = {5'h10{M_ctl_wdsel}};
    M_wdsel_mux_inp0 = M_alu_out;
    M_wdsel_mux_inp1 = M_data_memory_read_data;
    M_joystick_regulator_input_read = M_data_memory_input0_read_data;
    M_joystick_regulator_in = joystick;
    M_button_regulator_input_read = M_data_memory_input1_read_data;
    M_button_regulator_in = button;
    M_input_printer_player0_occupancy = M_data_memory_player0_read;
    M_input_printer_player1_occupancy = M_data_memory_player1_read;
    M_input_printer_selection_occupancy = M_data_memory_selection_read;
    rows = M_input_printer_row;
    player0 = M_input_printer_column0;
    player1 = M_input_printer_column1;
    turn[1+0-:1] = ~M_data_memory_turn_read;
    turn[0+0-:1] = M_data_memory_turn_read;
    debug_read[4+3-:4] = M_regfile_debug_r0;
    debug_read[0+3-:4] = M_regfile_debug_r1;
  end
endmodule
