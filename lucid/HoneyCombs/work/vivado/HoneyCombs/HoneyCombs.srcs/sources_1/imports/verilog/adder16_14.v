/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder16_14 (
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] s,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  reg [15:0] cout;
  reg [15:0] s_int;
  
  wire [1-1:0] M_fa0_s;
  wire [1-1:0] M_fa0_cout;
  reg [1-1:0] M_fa0_a;
  reg [1-1:0] M_fa0_b;
  reg [1-1:0] M_fa0_cin;
  full_adder_26 fa0 (
    .a(M_fa0_a),
    .b(M_fa0_b),
    .cin(M_fa0_cin),
    .s(M_fa0_s),
    .cout(M_fa0_cout)
  );
  
  wire [(4'hf+0)-1:0] M_fa1_s;
  wire [(4'hf+0)-1:0] M_fa1_cout;
  reg [(4'hf+0)-1:0] M_fa1_a;
  reg [(4'hf+0)-1:0] M_fa1_b;
  reg [(4'hf+0)-1:0] M_fa1_cin;
  
  genvar GEN_fa10;
  generate
  for (GEN_fa10=0;GEN_fa10<4'hf;GEN_fa10=GEN_fa10+1) begin: fa1_gen_0
    full_adder_26 fa1 (
      .a(M_fa1_a[GEN_fa10*(1)+(1)-1-:(1)]),
      .b(M_fa1_b[GEN_fa10*(1)+(1)-1-:(1)]),
      .cin(M_fa1_cin[GEN_fa10*(1)+(1)-1-:(1)]),
      .s(M_fa1_s[GEN_fa10*(1)+(1)-1-:(1)]),
      .cout(M_fa1_cout[GEN_fa10*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_fa0_a = a[0+0-:1];
    M_fa0_b = b[0+0-:1];
    M_fa0_cin = 1'h0;
    s_int[0+0-:1] = M_fa0_s;
    cout[0+0-:1] = M_fa0_cout;
    M_fa1_a = a[1+14-:15];
    M_fa1_b = b[1+14-:15];
    s_int[1+14-:15] = M_fa1_s;
    cout[1+14-:15] = M_fa1_cout;
    M_fa1_cin = cout[0+14-:15];
    s = s_int;
    z = ~(s_int[0+0-:1] | s_int[1+0-:1] | s_int[2+0-:1] | s_int[3+0-:1] | s_int[4+0-:1] | s_int[5+0-:1] | s_int[6+0-:1] | s_int[7+0-:1] | s_int[8+0-:1] | s_int[9+0-:1] | s_int[10+0-:1] | s_int[11+0-:1] | s_int[12+0-:1] | s_int[13+0-:1] | s_int[14+0-:1] | s_int[15+0-:1]);
    v = (a[15+0-:1] & b[15+0-:1] & (~s_int[15+0-:1])) | ((~a[15+0-:1]) & (~b[15+0-:1]) & s_int[15+0-:1]);
    n = s_int[15+0-:1];
  end
endmodule
